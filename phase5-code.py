# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hVdY7cUIRJEDH33XMRh8jqkHTZuNhMfD
"""

# flood_prediction.py

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
import random

# Step 1: Simulated Dataset (Rainfall in mm and River level in meters)
data = {
    'rainfall': [100, 120, 80, 150, 300, 10, 20, 200, 250, 90, 60, 30],
    'river_level': [4.2, 4.5, 3.8, 5.0, 6.5, 2.0, 2.2, 5.8, 6.0, 3.5, 3.0, 2.5],
    'flood_risk': [1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0]  # 1 = Flood likely, 0 = Safe
}

# Convert to DataFrame
df = pd.DataFrame(data)

# Step 2: Prepare training data
X = df[['rainfall', 'river_level']]
y = df['flood_risk']

# Step 3: Train the model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X, y)

# Step 4: Simulate IoT sensor input
def get_sensor_data():
    rainfall = random.uniform(10, 300)  # mm
    river_level = random.uniform(2.0, 7.0)  # meters
    return round(rainfall, 2), round(river_level, 2)

# Step 5: Make Prediction
rainfall, river_level = get_sensor_data()
input_data = pd.DataFrame([[rainfall, river_level]], columns=['rainfall', 'river_level'])
prediction = model.predict(input_data)[0]

# Step 6: Output
print(f"Simulated Sensor Data => Rainfall: {rainfall} mm | River Level: {river_level} m")
if prediction == 1:
    print("ALERT: High risk of flood! Take precautionary measures.")
else:
    print("STATUS: Area is safe from flood risk.")